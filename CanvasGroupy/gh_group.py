# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_gh_group_creation.ipynb.

# %% auto 0
__all__ = ['GitHubGroup', 'command', 'check_gh_auth', 'git_creat_repo_cmd', 'git_manage_access_cmd', 'cd_cmd', 'git_rename_cmd',
           'git_commit', 'git_add_all', 'delete_directory']

# %% ../nbs/02_gh_group_creation.ipynb 3
from github import Github

# %% ../nbs/02_gh_group_creation.ipynb 4
class GitHubGroup():
    def __init__(self,
                 token="",
                 org=""
                ):
        return ...

# %% ../nbs/02_gh_group_creation.ipynb 8
def command(cmd: str # command to call in bash
           ) -> (bool, str): # success, output
    "Execute the given command in shell"
    success = False 
    try:
        output = subprocess.check_output(cmd, shell=True, stderr = subprocess.STDOUT)
        success = True 
    except subprocess.CalledProcessError as e:
        output = e.output
    except Exception as e:
        # check_call can raise other exceptions, such as FileNotFoundError
        output = str(e)
    print('> '+cmd)
    print(output.decode())
    return success, output

# %% ../nbs/02_gh_group_creation.ipynb 9
def check_gh_auth() -> bool: # whether you have authenticate
    "Check whether you have gh auth configured"
    msg = command("gh auth status")[1]
    if "You are not logged into any GitHub hosts" in str(msg):
        return False
    return True

# %% ../nbs/02_gh_group_creation.ipynb 10
def git_creat_repo_cmd(repo_name:str, # the name of the created repository
                   repo_org: str, # the GitHub organization name
                   template_repo:str, # the template repository that the new repo will use
                   private_repo=True  # the visibility of the repository
                   ) -> str: # the command of repo creation
    "Generate the appropriate command for creating GitHub repository"
    cmd = "gh repo create"
    if template_repo is not None:
        cmd = f"{cmd} --template {template_repo}"
    if private_repo:
        cmd = f"{cmd} --private"
    cmd = f"{cmd} --clone {repo_org}/{repo_name}"
    return cmd

# %% ../nbs/02_gh_group_creation.ipynb 12
def git_manage_access_cmd(repo_name:str, # the name of the created repository
                      repo_org: str, # the GitHub organization name that the repo belongs to
                      collaorator_id: str, # the GitHub id of the collaborator, or team name if `add_team=True`
                      permission="push",  # the permission to that collaborator
                      add_team=False      # add access to github org's team
                     ) -> str: # the command of repo creation
    "GitHub CLI Command for modifying access priviliges of repo"
    if add_team:
        return (f"gh api -X PUT -f permission={permission} --silent "
                f"/orgs/{repo_org}/teams/{collaorator_id}/repos/{repo_org}/{repo_name}")
    cmd = f"gh api -X PUT -f permission={permission} --silent repos/{repo_org}/{repo_name}/{collaorator_id}"
    return cmd


# %% ../nbs/02_gh_group_creation.ipynb 15
def cd_cmd(target_dir: str # the target directory we want to change to
          ) -> str: # the command of cd
    "Unix command for change directory"
    return f"cd {target_dir}"

# %% ../nbs/02_gh_group_creation.ipynb 16
def git_rename_cmd(source: str, # the original name of the file
                   target: str # the target name of the file
                  ) -> str: # the command of git rename file
    "GitHub mv command to rename file in the directory"
    return f"git mv {source} {target}"

# %% ../nbs/02_gh_group_creation.ipynb 17
def git_commit(commit_msg: str, # Commit Message
              ) -> str: # the command for git commit
    "GitHub commit command"
    return f'git commit -m "{commit_msg}"'

# %% ../nbs/02_gh_group_creation.ipynb 18
def git_add_all():
    return "git add -A"

# %% ../nbs/02_gh_group_creation.ipynb 19
def delete_directory(dir_name: str # the directory that we want to delete
                    ) -> str: # the command for delete dir
    return f"rm -rf {dir_name}"
