[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "check_gh_auth()\n\n&gt; gh auth status\nusage: gh [-h] [--home] [-p] [-b] [-s] [-r] [-t] [-c] [-w] [-i] [-d] [-v]\ngh: error: unrecognized arguments: auth status\n\n\n\nTrue"
  },
  {
    "objectID": "canvas_group_creation.html",
    "href": "canvas_group_creation.html",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "source\n\n\n\n CanvasGroup (API_URL='https://canvas.ucsd.edu', API_KEY='', course_id='')\n\nInitialize Canvas Group within a Group Set and its appropriate memberships\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nAPI_URL\nstr\nhttps://canvas.ucsd.edu\nthe domain name of canvas\n\n\nAPI_KEY\nstr\n\nIntegrations’ API generated by canvas\n\n\ncourse_id\nstr\n\nCourse ID, can be found in the course url\n\n\n\n\n\n\nIf API_KEY and/or course_id was passed into the initializer, it will call the following methods to load the relevant information about your canvas and your canvas course.\nAlternatively, you can manually set them after you created the CanvasGroup object\n\nsource\n\n\n\n CanvasGroup.auth_canvas (API_key:str)\n\nAuthorize the canvas module with API_KEY\n\n\n\n\nType\nDetails\n\n\n\n\nAPI_key\nstr\nthe Authenticator key generated from canvas\n\n\n\n\nsource\n\n\n\n\n CanvasGroup.set_course (course_id:int)\n\nSet the target course by the course ID\n\n\n\n\nType\nDetails\n\n\n\n\ncourse_id\nint\nthe course id of the target course\n\n\n\n\n# instansiate a new Canvas Group Object \n# if your class size is large, it will take around 2 minutes to grab all student info.\ncg = CanvasGroup(API_URL, API_KEY, course_id=course_id)\n\n\n\n\n\n\nsource\n\n\n\n CanvasGroup.assign_canvas_group (group_name:str,\n                                  group_members:[&lt;class'str'&gt;],\n                                  in_group_category:str)\n\nCreate new groups and assign group member into the class in the self.group_category\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngroup_name\nstr\ngroup name, display on canvas\n\n\ngroup_members\n[&lt;class ‘str’&gt;]\nlist of group member’s SIS Login\n\n\nin_group_category\nstr\nspecify which group category the group belongs to\n\n\nReturns\n[&lt;class ‘str’&gt;]\nlist of unsuccessful join\n\n\n\nIn this way, we could directly create canvas group by specifying the group name, members info, and the group category directly.\n\nmember2 = \"email2\"\nunsuccessful = cg.assign_canvas_group(\n    group_name=\"Group02-SP23\", \n    group_members=[member2], \n    in_group_category=\"Group Project 1\"\n)\nunsuccessful\n\n[]\n\n\nNote that it will throw a Value Error if the target in_group_category did not exist in the course.\n\ncg.assign_canvas_group(\n    group_name=\"Failed\",\n    group_members=[member2],\n    in_group_category=\"Group Project 2\"\n)\n\nKeyError: 'Group Project 2 did not found in the group categories.\\n Try to create one with CanvasGroup.create_group_category'\n\n\n\n\n\n\n\nsource\n\n\n\n CanvasGroup.get_group_categories ()\n\nGrab all existing group category (group set) in this course\n\n# list all current group category\nlist(cg.get_group_categories().keys())\n\n['Final-Project_testing', 'Group Project 1']\n\n\n\nsource\n\n\n\n\n CanvasGroup.create_group_category (params:dict)\n\nCreate group category (group set) in this course\n\n\n\n\nType\nDetails\n\n\n\n\nparams\ndict\nthe parameter of canvas group category API @ this link\n\n\nReturns\nGroupCategory\nthe generated group category object\n\n\n\n\nparams = {\n    \"name\": \"Group Project 1\",\n    \"group_limit\": 5\n}\n\n\n# create a new category\ngroup_category = cg.create_group_category(params)\nprint(f\"Our new group category (set) is called: {group_category.name}\")\n\nOur new group category (set) is called: Group Project 1\n\n\n\n# Check whether we successfully create a new group\nlist(cg.get_group_categories().keys())\n\n['Final-Project_testing', 'Group Project 1']\n\n\nWhen a group category is already created, we cannot create another group with the same name. To switch the group category destination of group creation, use the set_group_category methods.\n\nsource\n\n\n\n\n CanvasGroup.set_group_category (category_name:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\ncategory_name\nstr\nthe target group category\n\n\nReturns\nGroupCategory\ntarget group category object\n\n\n\n\ngroup_category = cg.set_group_category(\"Final-Project_testing\")\n\n\n\n\n\n\nsource\n\n\n\n CanvasGroup.create_group (params:dict)\n\nCreate canvas group under the target group category\n\n\n\n\nType\nDetails\n\n\n\n\nparams\ndict\nthe parameter of canvas group create API at this link\n\n\nReturns\nGroup\nthe generated target group object\n\n\n\n\nparams = {\n    \"name\": \"Group01_SP23\",\n    \"join_level\": \"invitation_only\"\n}\ngroup1 = cg.create_group(params)\ngroup1\n\nGroup(_requester=&lt;canvasapi.requester.Requester object&gt;, id=121649, name=Group01_SP23, created_at=2023-04-19T08:14:04Z, created_at_date=2023-04-19 08:14:04+00:00, max_membership=5, is_public=False, join_level=invitation_only, group_category_id=16167, description=None, members_count=0, storage_quota_mb=1024, storage_quota_mb_date=1024-01-01 00:00:00+00:00, permissions={'create_discussion_topic': True, 'join': False, 'create_announcement': True}, context_type=Course, course_id=45059, avatar_url=None, role=None, leader=None, users=[], group_category={'id': 16167, 'name': 'Final-Project_testing', 'role': None, 'self_signup': None, 'group_limit': 5, 'auto_leader': None, 'created_at': '2023-04-19T03:27:12Z', 'context_type': 'Course', 'course_id': 45059, 'protected': False, 'allows_multiple_memberships': False, 'is_member': False}, has_submission=False, concluded=False)\n\n\n\n\n\n\n\nsource\n\n\n\n CanvasGroup.join_canvas_group (group:canvasapi.group.Group,\n                                group_members:[&lt;class'str'&gt;])\n\nAdd membership access of each group member into the group\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngroup\nGroup\nthe group that students will join\n\n\ngroup_members\n[&lt;class ‘str’&gt;]\nlist of group member’s SIS Login (email prefix, before the @.)\n\n\nReturns\n[&lt;class ‘str’&gt;]\nlist of unsuccessful join\n\n\n\n\nmember1 = \"email\"\ncg.join_canvas_group(group1, [member1])\n\n[]"
  },
  {
    "objectID": "gh_group_creation.html",
    "href": "gh_group_creation.html",
    "title": "GitHub Group Creation",
    "section": "",
    "text": "source\n\nGitHubGroup\n\n GitHubGroup (token='', org='')\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nIf you wish to use gh\n\nsource\n\ncommand\n\n command (cmd:str)\n\nExecute the given command in shell\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncmd\nstr\ncommand to call in bash\n\n\nReturns\n(&lt;class ‘bool’&gt;, &lt;class ‘str’&gt;)\nsuccess, output\n\n\n\n\nsource\n\n\ncheck_gh_auth\n\n check_gh_auth ()\n\nCheck whether you have gh auth configured\n\nsource\n\n\ngit_creat_repo_cmd\n\n git_creat_repo_cmd (repo_name:str, repo_org:str, template_repo:str,\n                     private_repo=True)\n\nGenerate the appropriate command for creating GitHub repository\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrepo_name\nstr\n\nthe name of the created repository\n\n\nrepo_org\nstr\n\nthe GitHub organization name\n\n\ntemplate_repo\nstr\n\nthe template repository that the new repo will use\n\n\nprivate_repo\nbool\nTrue\nthe visibility of the repository\n\n\nReturns\nstr\n\nthe command of repo creation\n\n\n\n\n#｜ hide\ntest_eq(\n    'gh repo create --template COGS108/group_template --private --clone COGS108/Group01_SP23',\n    git_creat_repo_cmd(\"Group01_SP23\", \"COGS108\", \"COGS108/group_template\")\n)\ntest_eq(\n    'gh repo create --private --clone COGS108/Group01_SP23',\n    git_creat_repo_cmd(\"Group01_SP23\", \"COGS108\", None)\n)\ntest_eq(\n    'gh repo create --clone COGS108/Group01_SP23',\n    git_creat_repo_cmd(\"Group01_SP23\", \"COGS108\", None, private_repo=False)\n)\n\n\nsource\n\n\ngit_manage_access_cmd\n\n git_manage_access_cmd (repo_name:str, repo_org:str, collaorator_id:str,\n                        permission='push', add_team=False)\n\nGitHub CLI Command for modifying access priviliges of repo\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrepo_name\nstr\n\nthe name of the created repository\n\n\nrepo_org\nstr\n\nthe GitHub organization name that the repo belongs to\n\n\ncollaorator_id\nstr\n\nthe GitHub id of the collaborator, or team name if add_team=True\n\n\npermission\nstr\npush\nthe permission to that collaborator\n\n\nadd_team\nbool\nFalse\nadd access to github org’s team\n\n\nReturns\nstr\n\nthe command of repo creation\n\n\n\nThe team must be in the same organization with the repos’ parent organization.\n\nsource\n\n\ncd_cmd\n\n cd_cmd (target_dir:str)\n\nUnix command for change directory\n\n\n\n\nType\nDetails\n\n\n\n\ntarget_dir\nstr\nthe target directory we want to change to\n\n\nReturns\nstr\nthe command of cd\n\n\n\n\nsource\n\n\ngit_rename_cmd\n\n git_rename_cmd (source:str, target:str)\n\nGitHub mv command to rename file in the directory\n\n\n\n\nType\nDetails\n\n\n\n\nsource\nstr\nthe original name of the file\n\n\ntarget\nstr\nthe target name of the file\n\n\nReturns\nstr\nthe command of git rename file\n\n\n\n\nsource\n\n\ngit_commit\n\n git_commit (commit_msg:str)\n\nGitHub commit command\n\n\n\n\nType\nDetails\n\n\n\n\ncommit_msg\nstr\nCommit Message\n\n\nReturns\nstr\nthe command for git commit\n\n\n\n\nsource\n\n\ngit_add_all\n\n git_add_all ()\n\n\nsource\n\n\ndelete_directory\n\n delete_directory (dir_name:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\ndir_name\nstr\nthe directory that we want to delete\n\n\nReturns\nstr\nthe command for delete dir"
  },
  {
    "objectID": "groupeng_assign.html",
    "href": "groupeng_assign.html",
    "title": "GroupEngAssign",
    "section": "",
    "text": "source\n\nassign_groups\n\n assign_groups (groupeng_config:str)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngroupeng_config\nstr\nDirectory for the GroupEng config yml file\n\n\nReturns\n(&lt;class ‘bool’&gt;, &lt;class ‘str’&gt;)\nStatus and output directory of the compile file.\n\n\n\n\nprint(os.listdir(\"example\")) # take a look at the example files name\n\n['sample_group_specification.groupeng', '.DS_Store', 'sample_group_specification_annotated.groupeng', 'sample_class_1.csv', '.ipynb_checkpoints']\n\n\n\nstatus, outdir = assign_groups(\"example/sample_group_specification.groupeng\")\n\n\n# take a look at the output\nstatus, outdir\n\n(False, 'groups_example_2023-04-14_17-36-01')\n\n\nThe false means that at least one requirment is not satisfied. We can take a look at the file that was generated.\n\ndetails = pd.read_csv(os.path.join(outdir, \"example_details.csv\"), on_bad_lines='skip')\ndetails.head()\n\n\n\n\n\n\n\n\nID\nGPA\nGender\nEthnicity\nMajor\nSkill1\nSkill2\nSkill3\nProject choice\nGroup Number\nUnnamed: 10\ngroup GPA mean\nRules Broken\n\n\n\n\n0\n37\n2.636350\nM\n-\nCiv E\ny\ny\n-\nnanotech\n1.0\nNaN\nNaN\nNaN\n\n\n1\n41\n2.225582\nF\n-\nCiv E\ny\ny\ny\nrobotics\n1.0\nNaN\nNaN\nNaN\n\n\n2\n61\n4.220161\nM\n-\nMech E\n-\n-\ny\nstatistics\n1.0\nNaN\nNaN\nNaN\n\n\n3\n63\n2.976609\nF\n-\nEE\ny\n-\ny\nautomotive\n1.0\nNaN\nNaN\nNaN\n\n\n4\n75\n3.775685\nF\n-\nCS\ny\ny\ny\nstatistics\n1.0\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nThe following package will generate Canvas and GitHub groups based on this generated csv files."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CanvasGroupy",
    "section": "",
    "text": "View our documentation at this link\nThis module will use GroupEng to create canvas and github groups."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "CanvasGroupy",
    "section": "Install",
    "text": "Install\npip install CanvasGroupy"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "CanvasGroupy",
    "section": "How to use",
    "text": "How to use\nPlease visit GroupEng Official Website to see the documnetation of how to use GroupEng.\n\nassign_groups(\"example/sample_group_specification.groupeng\")\n\n['-', '-', 'B', '-', '-']\n['B', '-', 'H', '-', '-']\n['H', '-', '-', '-', '-']\n['-', 'H', '-', 'B', 'H']\n['-', '-', '-', 'B', '-']\n['-', '-', 'H', '-', '-']\n['nanotech', 'renewable energy', 'nanotech', 'nanotech', 'nanotech']\n['automotive', 'automotive', 'robotics', 'automotive', 'renewable energy']\n['automotive', 'statistics', 'automotive', 'renewable energy', 'renewable energy']\n['automotive', 'automotive', 'statistics', 'renewable energy', 'renewable energy']\n['automotive', 'automotive', 'renewable energy', 'statistics', 'renewable energy']\n['renewable energy', 'automotive', 'automotive', 'statistics', 'renewable energy']\n['CS', 'EE', 'Mech E', 'CS', 'EE']\n['CS', 'EE', 'Mech E', 'Mech E', 'EE']\n['CS', 'Civ E', 'EE', 'Mech E', 'Mech E']\n['EE', 'Civ E', 'Civ E', 'EE', 'Mech E']\n['EE', 'Mech E', 'CS', 'EE', 'EE']\n['Civ E', 'Mech E', 'CS', 'Mech E', 'EE']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['-', '-', 'y', '-', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', '-', '-', 'y', 'y']\n['y', 'y', 'y', '-', '-']\n['y', 'y', '-', 'y', '-']\n['-', '-', '-', 'y', 'y']\n['y', '-', 'y', '-', 'y']\n['-', '-', 'y', '-', 'y']\n[3.2579174234, 3.5995299693, 3.2756432963, 4.220160605, 2.5723254477]\n[3.2579174234, 3.2756432963, 2.5723254477, 3.5995299693, 4.220160605]\n[4.220160605, 3.5995299693, 3.2756432963, 3.2579174234, 2.5723254477]\n[3.2756432963, 4.220160605, 3.2579174234, 2.5723254477, 3.5995299693]\n[3.5995299693, 4.220160605, 3.2756432963, 3.2579174234, 2.5723254477]\n[3.5995299693, 3.2756432963, 2.5723254477, 3.2579174234, 4.220160605]\n\n\n(False, 'groups_example_2023-04-18_13-00-35')"
  },
  {
    "objectID": "canvas_group_creation.html#canvas-authentication",
    "href": "canvas_group_creation.html#canvas-authentication",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "If API_KEY and/or course_id was passed into the initializer, it will call the following methods to load the relevant information about your canvas and your canvas course.\nAlternatively, you can manually set them after you created the CanvasGroup object\n\nsource\n\n\n\n CanvasGroup.auth_canvas (API_key:str)\n\nAuthorize the canvas module with API_KEY\n\n\n\n\nType\nDetails\n\n\n\n\nAPI_key\nstr\nthe Authenticator key generated from canvas\n\n\n\n\nsource\n\n\n\n\n CanvasGroup.set_course (course_id:int)\n\nSet the target course by the course ID\n\n\n\n\nType\nDetails\n\n\n\n\ncourse_id\nint\nthe course id of the target course\n\n\n\n\n# instansiate a new Canvas Group Object \n# if your class size is large, it will take around 2 minutes to grab all student info.\ncg = CanvasGroup(API_URL, API_KEY, course_id=course_id)"
  },
  {
    "objectID": "canvas_group_creation.html#create-assign-group-in-one-call",
    "href": "canvas_group_creation.html#create-assign-group-in-one-call",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "source\n\n\n\n CanvasGroup.assign_canvas_group (group_name:str,\n                                  group_members:[&lt;class'str'&gt;],\n                                  in_group_category:str)\n\nCreate new groups and assign group member into the class in the self.group_category\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngroup_name\nstr\ngroup name, display on canvas\n\n\ngroup_members\n[&lt;class ‘str’&gt;]\nlist of group member’s SIS Login\n\n\nin_group_category\nstr\nspecify which group category the group belongs to\n\n\nReturns\n[&lt;class ‘str’&gt;]\nlist of unsuccessful join\n\n\n\nIn this way, we could directly create canvas group by specifying the group name, members info, and the group category directly.\n\nmember2 = \"email2\"\nunsuccessful = cg.assign_canvas_group(\n    group_name=\"Group02-SP23\", \n    group_members=[member2], \n    in_group_category=\"Group Project 1\"\n)\nunsuccessful\n\n[]\n\n\nNote that it will throw a Value Error if the target in_group_category did not exist in the course.\n\ncg.assign_canvas_group(\n    group_name=\"Failed\",\n    group_members=[member2],\n    in_group_category=\"Group Project 2\"\n)\n\nKeyError: 'Group Project 2 did not found in the group categories.\\n Try to create one with CanvasGroup.create_group_category'"
  },
  {
    "objectID": "canvas_group_creation.html#create-set-target-group-category-set",
    "href": "canvas_group_creation.html#create-set-target-group-category-set",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "source\n\n\n\n CanvasGroup.get_group_categories ()\n\nGrab all existing group category (group set) in this course\n\n# list all current group category\nlist(cg.get_group_categories().keys())\n\n['Final-Project_testing', 'Group Project 1']\n\n\n\nsource\n\n\n\n\n CanvasGroup.create_group_category (params:dict)\n\nCreate group category (group set) in this course\n\n\n\n\nType\nDetails\n\n\n\n\nparams\ndict\nthe parameter of canvas group category API @ this link\n\n\nReturns\nGroupCategory\nthe generated group category object\n\n\n\n\nparams = {\n    \"name\": \"Group Project 1\",\n    \"group_limit\": 5\n}\n\n\n# create a new category\ngroup_category = cg.create_group_category(params)\nprint(f\"Our new group category (set) is called: {group_category.name}\")\n\nOur new group category (set) is called: Group Project 1\n\n\n\n# Check whether we successfully create a new group\nlist(cg.get_group_categories().keys())\n\n['Final-Project_testing', 'Group Project 1']\n\n\nWhen a group category is already created, we cannot create another group with the same name. To switch the group category destination of group creation, use the set_group_category methods.\n\nsource\n\n\n\n\n CanvasGroup.set_group_category (category_name:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\ncategory_name\nstr\nthe target group category\n\n\nReturns\nGroupCategory\ntarget group category object\n\n\n\n\ngroup_category = cg.set_group_category(\"Final-Project_testing\")"
  },
  {
    "objectID": "canvas_group_creation.html#create-a-group-inside-the-target-group-category",
    "href": "canvas_group_creation.html#create-a-group-inside-the-target-group-category",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "source\n\n\n\n CanvasGroup.create_group (params:dict)\n\nCreate canvas group under the target group category\n\n\n\n\nType\nDetails\n\n\n\n\nparams\ndict\nthe parameter of canvas group create API at this link\n\n\nReturns\nGroup\nthe generated target group object\n\n\n\n\nparams = {\n    \"name\": \"Group01_SP23\",\n    \"join_level\": \"invitation_only\"\n}\ngroup1 = cg.create_group(params)\ngroup1\n\nGroup(_requester=&lt;canvasapi.requester.Requester object&gt;, id=121649, name=Group01_SP23, created_at=2023-04-19T08:14:04Z, created_at_date=2023-04-19 08:14:04+00:00, max_membership=5, is_public=False, join_level=invitation_only, group_category_id=16167, description=None, members_count=0, storage_quota_mb=1024, storage_quota_mb_date=1024-01-01 00:00:00+00:00, permissions={'create_discussion_topic': True, 'join': False, 'create_announcement': True}, context_type=Course, course_id=45059, avatar_url=None, role=None, leader=None, users=[], group_category={'id': 16167, 'name': 'Final-Project_testing', 'role': None, 'self_signup': None, 'group_limit': 5, 'auto_leader': None, 'created_at': '2023-04-19T03:27:12Z', 'context_type': 'Course', 'course_id': 45059, 'protected': False, 'allows_multiple_memberships': False, 'is_member': False}, has_submission=False, concluded=False)"
  },
  {
    "objectID": "canvas_group_creation.html#assign-student-to-the-group",
    "href": "canvas_group_creation.html#assign-student-to-the-group",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "source\n\n\n\n CanvasGroup.join_canvas_group (group:canvasapi.group.Group,\n                                group_members:[&lt;class'str'&gt;])\n\nAdd membership access of each group member into the group\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngroup\nGroup\nthe group that students will join\n\n\ngroup_members\n[&lt;class ‘str’&gt;]\nlist of group member’s SIS Login (email prefix, before the @.)\n\n\nReturns\n[&lt;class ‘str’&gt;]\nlist of unsuccessful join\n\n\n\n\nmember1 = \"email\"\ncg.join_canvas_group(group1, [member1])\n\n[]"
  }
]