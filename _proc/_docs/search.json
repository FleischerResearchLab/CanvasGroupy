[
  {
    "objectID": "canvas_group_creation.html",
    "href": "canvas_group_creation.html",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "source\n\n\n\n CanvasGroup (API_URL='https://canvas.ucsd.edu', API_KEY='', course_id='')\n\nInitialize Canvas Group within a Group Set and its appropriate memberships\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nAPI_URL\nstr\nhttps://canvas.ucsd.edu\nthe domain name of canvas\n\n\nAPI_KEY\nstr\n\nIntegrations’ API generated by canvas\n\n\ncourse_id\nstr\n\nCourse ID, can be found in the course url\n\n\n\n\n\n\nIf API_KEY and/or course_id was passed into the initializer, it will call the following methods to load the relevant information about your canvas and your canvas course.\nAlternatively, you can manually set them after you created the CanvasGroup object\n\nsource\n\n\n\n CanvasGroup.auth_canvas (API_key:str)\n\nAuthorize the canvas module with API_KEY\n\n\n\n\nType\nDetails\n\n\n\n\nAPI_key\nstr\nthe Authenticator key generated from canvas\n\n\n\n\nsource\n\n\n\n\n CanvasGroup.set_course (course_id:int)\n\nSet the target course by the course ID\n\n\n\n\nType\nDetails\n\n\n\n\ncourse_id\nint\nthe course id of the target course\n\n\n\n\n# instansiate a new Canvas Group Object \n# if your class size is large, it will take around 2 minutes to grab all student info.\nAPI_URL = \"https://canvas.ucsd.edu/\"\nAPI_KEY = ...\ncg = CanvasGroup(API_URL, API_KEY, course_id=course_id)\n\n\n\n\n\n\nsource\n\n\n\n CanvasGroup.assign_canvas_group (group_name:str,\n                                  group_members:[&lt;class'str'&gt;],\n                                  in_group_category:str)\n\nCreate new groups and assign group member into the class in the self.group_category\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngroup_name\nstr\ngroup name, display on canvas\n\n\ngroup_members\n[&lt;class ‘str’&gt;]\nlist of group member’s SIS Login\n\n\nin_group_category\nstr\nspecify which group category the group belongs to\n\n\nReturns\n[&lt;class ‘str’&gt;]\nlist of unsuccessful join\n\n\n\nIn this way, we could directly create canvas group by specifying the group name, members info, and the group category directly.\n\nmember2 = \"email2\"\nunsuccessful = cg.assign_canvas_group(\n    group_name=\"Group02-SP23\", \n    group_members=[member2], \n    in_group_category=\"Group Project 1\"\n)\nunsuccessful\n\n[]\n\n\nNote that it will throw a Key Error if the target in_group_category did not exist in the course.\n\ncg.assign_canvas_group(\n    group_name=\"Failed\",\n    group_members=[member2],\n    in_group_category=\"Group Project 2\"\n)\n\nKeyError: 'Group Project 2 did not found in the group categories.\\n Try to create one with CanvasGroup.create_group_category'\n\n\nThe following tutorial and examples demonstrates how to create and set a Group Category within a course context.\n\n\n\n\n\nsource\n\n\n\n CanvasGroup.get_group_categories ()\n\nGrab all existing group category (group set) in this course\n\n# list all current group category\nlist(cg.get_group_categories().keys())\n\n['Final-Project_testing', 'Group Project 1']\n\n\n\nsource\n\n\n\n\n CanvasGroup.create_group_category (params:dict)\n\nCreate group category (group set) in this course\n\n\n\n\nType\nDetails\n\n\n\n\nparams\ndict\nthe parameter of canvas group category API @ this link\n\n\nReturns\nGroupCategory\nthe generated group category object\n\n\n\n\nparams = {\n    \"name\": \"Group Project 1\",\n    \"group_limit\": 5\n}\n\n\n# create a new category\ngroup_category = cg.create_group_category(params)\nprint(f\"Our new group category (set) is called: {group_category.name}\")\n\nOur new group category (set) is called: Group Project 1\n\n\n\n# Check whether we successfully create a new group\nlist(cg.get_group_categories().keys())\n\n['Final-Project_testing', 'Group Project 1']\n\n\nWhen a group category is already created, we cannot create another group with the same name. To switch the group category destination of group creation, use the set_group_category methods.\n\nsource\n\n\n\n\n CanvasGroup.set_group_category (category_name:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\ncategory_name\nstr\nthe target group category\n\n\nReturns\nGroupCategory\ntarget group category object\n\n\n\n\ngroup_category = cg.set_group_category(\"Final-Project_testing\")\n\n\n\n\n\n\nsource\n\n\n\n CanvasGroup.create_group (params:dict)\n\nCreate canvas group under the target group category\n\n\n\n\nType\nDetails\n\n\n\n\nparams\ndict\nthe parameter of canvas group create API at this link\n\n\nReturns\nGroup\nthe generated target group object\n\n\n\n\nparams = {\n    \"name\": \"Group01_SP23\",\n    \"join_level\": \"invitation_only\"\n}\ngroup1 = cg.create_group(params)\ngroup1\n\nGroup(_requester=&lt;canvasapi.requester.Requester object&gt;, id=121649, name=Group01_SP23, created_at=2023-04-19T08:14:04Z, created_at_date=2023-04-19 08:14:04+00:00, max_membership=5, is_public=False, join_level=invitation_only, group_category_id=16167, description=None, members_count=0, storage_quota_mb=1024, storage_quota_mb_date=1024-01-01 00:00:00+00:00, permissions={'create_discussion_topic': True, 'join': False, 'create_announcement': True}, context_type=Course, course_id=45059, avatar_url=None, role=None, leader=None, users=[], group_category={'id': 16167, 'name': 'Final-Project_testing', 'role': None, 'self_signup': None, 'group_limit': 5, 'auto_leader': None, 'created_at': '2023-04-19T03:27:12Z', 'context_type': 'Course', 'course_id': 45059, 'protected': False, 'allows_multiple_memberships': False, 'is_member': False}, has_submission=False, concluded=False)\n\n\n\n\n\n\n\nsource\n\n\n\n CanvasGroup.join_canvas_group (group:canvasapi.group.Group,\n                                group_members:[&lt;class'str'&gt;])\n\nAdd membership access of each group member into the group\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngroup\nGroup\nthe group that students will join\n\n\ngroup_members\n[&lt;class ‘str’&gt;]\nlist of group member’s SIS Login (email prefix, before the @.)\n\n\nReturns\n[&lt;class ‘str’&gt;]\nlist of unsuccessful join\n\n\n\n\nmember1 = \"email\"\ncg.join_canvas_group(group1, [member1])\n\n[]"
  },
  {
    "objectID": "canvas_group_creation.html#canvas-authentication",
    "href": "canvas_group_creation.html#canvas-authentication",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "If API_KEY and/or course_id was passed into the initializer, it will call the following methods to load the relevant information about your canvas and your canvas course.\nAlternatively, you can manually set them after you created the CanvasGroup object\n\nsource\n\n\n\n CanvasGroup.auth_canvas (API_key:str)\n\nAuthorize the canvas module with API_KEY\n\n\n\n\nType\nDetails\n\n\n\n\nAPI_key\nstr\nthe Authenticator key generated from canvas\n\n\n\n\nsource\n\n\n\n\n CanvasGroup.set_course (course_id:int)\n\nSet the target course by the course ID\n\n\n\n\nType\nDetails\n\n\n\n\ncourse_id\nint\nthe course id of the target course\n\n\n\n\n# instansiate a new Canvas Group Object \n# if your class size is large, it will take around 2 minutes to grab all student info.\nAPI_URL = \"https://canvas.ucsd.edu/\"\nAPI_KEY = ...\ncg = CanvasGroup(API_URL, API_KEY, course_id=course_id)"
  },
  {
    "objectID": "canvas_group_creation.html#create-assign-group-in-one-call",
    "href": "canvas_group_creation.html#create-assign-group-in-one-call",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "source\n\n\n\n CanvasGroup.assign_canvas_group (group_name:str,\n                                  group_members:[&lt;class'str'&gt;],\n                                  in_group_category:str)\n\nCreate new groups and assign group member into the class in the self.group_category\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngroup_name\nstr\ngroup name, display on canvas\n\n\ngroup_members\n[&lt;class ‘str’&gt;]\nlist of group member’s SIS Login\n\n\nin_group_category\nstr\nspecify which group category the group belongs to\n\n\nReturns\n[&lt;class ‘str’&gt;]\nlist of unsuccessful join\n\n\n\nIn this way, we could directly create canvas group by specifying the group name, members info, and the group category directly.\n\nmember2 = \"email2\"\nunsuccessful = cg.assign_canvas_group(\n    group_name=\"Group02-SP23\", \n    group_members=[member2], \n    in_group_category=\"Group Project 1\"\n)\nunsuccessful\n\n[]\n\n\nNote that it will throw a Key Error if the target in_group_category did not exist in the course.\n\ncg.assign_canvas_group(\n    group_name=\"Failed\",\n    group_members=[member2],\n    in_group_category=\"Group Project 2\"\n)\n\nKeyError: 'Group Project 2 did not found in the group categories.\\n Try to create one with CanvasGroup.create_group_category'\n\n\nThe following tutorial and examples demonstrates how to create and set a Group Category within a course context."
  },
  {
    "objectID": "canvas_group_creation.html#create-set-target-group-category-set",
    "href": "canvas_group_creation.html#create-set-target-group-category-set",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "source\n\n\n\n CanvasGroup.get_group_categories ()\n\nGrab all existing group category (group set) in this course\n\n# list all current group category\nlist(cg.get_group_categories().keys())\n\n['Final-Project_testing', 'Group Project 1']\n\n\n\nsource\n\n\n\n\n CanvasGroup.create_group_category (params:dict)\n\nCreate group category (group set) in this course\n\n\n\n\nType\nDetails\n\n\n\n\nparams\ndict\nthe parameter of canvas group category API @ this link\n\n\nReturns\nGroupCategory\nthe generated group category object\n\n\n\n\nparams = {\n    \"name\": \"Group Project 1\",\n    \"group_limit\": 5\n}\n\n\n# create a new category\ngroup_category = cg.create_group_category(params)\nprint(f\"Our new group category (set) is called: {group_category.name}\")\n\nOur new group category (set) is called: Group Project 1\n\n\n\n# Check whether we successfully create a new group\nlist(cg.get_group_categories().keys())\n\n['Final-Project_testing', 'Group Project 1']\n\n\nWhen a group category is already created, we cannot create another group with the same name. To switch the group category destination of group creation, use the set_group_category methods.\n\nsource\n\n\n\n\n CanvasGroup.set_group_category (category_name:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\ncategory_name\nstr\nthe target group category\n\n\nReturns\nGroupCategory\ntarget group category object\n\n\n\n\ngroup_category = cg.set_group_category(\"Final-Project_testing\")"
  },
  {
    "objectID": "canvas_group_creation.html#create-a-group-inside-the-target-group-category",
    "href": "canvas_group_creation.html#create-a-group-inside-the-target-group-category",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "source\n\n\n\n CanvasGroup.create_group (params:dict)\n\nCreate canvas group under the target group category\n\n\n\n\nType\nDetails\n\n\n\n\nparams\ndict\nthe parameter of canvas group create API at this link\n\n\nReturns\nGroup\nthe generated target group object\n\n\n\n\nparams = {\n    \"name\": \"Group01_SP23\",\n    \"join_level\": \"invitation_only\"\n}\ngroup1 = cg.create_group(params)\ngroup1\n\nGroup(_requester=&lt;canvasapi.requester.Requester object&gt;, id=121649, name=Group01_SP23, created_at=2023-04-19T08:14:04Z, created_at_date=2023-04-19 08:14:04+00:00, max_membership=5, is_public=False, join_level=invitation_only, group_category_id=16167, description=None, members_count=0, storage_quota_mb=1024, storage_quota_mb_date=1024-01-01 00:00:00+00:00, permissions={'create_discussion_topic': True, 'join': False, 'create_announcement': True}, context_type=Course, course_id=45059, avatar_url=None, role=None, leader=None, users=[], group_category={'id': 16167, 'name': 'Final-Project_testing', 'role': None, 'self_signup': None, 'group_limit': 5, 'auto_leader': None, 'created_at': '2023-04-19T03:27:12Z', 'context_type': 'Course', 'course_id': 45059, 'protected': False, 'allows_multiple_memberships': False, 'is_member': False}, has_submission=False, concluded=False)"
  },
  {
    "objectID": "canvas_group_creation.html#assign-student-to-the-group",
    "href": "canvas_group_creation.html#assign-student-to-the-group",
    "title": "Canvas Group Creation",
    "section": "",
    "text": "source\n\n\n\n CanvasGroup.join_canvas_group (group:canvasapi.group.Group,\n                                group_members:[&lt;class'str'&gt;])\n\nAdd membership access of each group member into the group\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngroup\nGroup\nthe group that students will join\n\n\ngroup_members\n[&lt;class ‘str’&gt;]\nlist of group member’s SIS Login (email prefix, before the @.)\n\n\nReturns\n[&lt;class ‘str’&gt;]\nlist of unsuccessful join\n\n\n\n\nmember1 = \"email\"\ncg.join_canvas_group(group1, [member1])\n\n[]"
  },
  {
    "objectID": "gh_group_creation.html",
    "href": "gh_group_creation.html",
    "title": "GitHub Group Creation",
    "section": "",
    "text": "&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nsource"
  },
  {
    "objectID": "gh_group_creation.html#lower-level-method",
    "href": "gh_group_creation.html#lower-level-method",
    "title": "GitHub Group Creation",
    "section": "Lower Level Method",
    "text": "Lower Level Method\n\nGitHub Repository Creation\n======="
  },
  {
    "objectID": "gh_group_creation.html#github-repository-creation-1",
    "href": "gh_group_creation.html#github-repository-creation-1",
    "title": "GitHub Group Creation",
    "section": "GitHub Repository Creation",
    "text": "GitHub Repository Creation\nNote: GtiHubGroup.create_group_repo call this method to create a GitHub repository\npersonal_account argument controls the location of the repository creation. If set to False (default), it will create repository in the target organization. If set to True, the new repository will be created in the personal GitHub account.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; THEIRS\n\nsource\n\nGitHubGroup.create_repo\n\n GitHubGroup.create_repo (repo_name:str, repo_template='', private=True,\n                          description='', personal_account=False)\n\nCreate a repository, either blank, or from a template\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrepo_name\nstr\n\nrepository name\n\n\nrepo_template\nstr\n\ntemplate repository that new repo will use. If empty string, an empty repo will be created. Put in the format of “/”\n\n\nprivate\nbool\nTrue\nvisibility of the created repository\n\n\ndescription\nstr\n\ndescription for the GitHub repository\n\n\npersonal_account\nbool\nFalse\ncreate repos in personal GitHub account\n\n\nReturns\nRepository\n\n\n\n\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nNote: GtiHubGroup.create_group_repo call this method to create a GitHub repository\npersonal_account argument controls the location of the repository creation. If set to False (default), it will create repository in the target organization. If set to True, the new repository will be created in the personal GitHub account.\n=======\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; THEIRS\n\n# create a repo under the org\nrepo = g.create_repo(\n    \"test-repo-organizational\",\n    private=True\n)\nprint(repo)\n\nRepository(full_name=\"COGS118A/test-repo-organizational\")\n\n\nAs you can see from the full name COGS118A/test-repo, it is created under the organization of COGS118A.\nAlternatively, I can also create a new repository under my personal account.\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n\n# create a repo under the my personal account\nrepo = g.create_repo(\n    \"test-repo-personal\",\n    private=True,\n    personal_account=True\n)\nprint(repo)\n\nRepository(full_name=\"scott-yj-yang/test-repo-personal\")\n\n\n=======\n\n# create a repo under the my personal account\nrepo = g.create_repo(\n    repo_name=\"test-repo-personal\",\n    private=True,\n    personal_account=True\n)\nprint(repo)\n\nRepository(full_name=\"scott-yj-yang/test-repo-personal\")\n\n\n\n\nCreate Repository from Template\nYou can also create a repository with a template repository. To do that, specify the full name of the template repository to the repo_template parameter. From the output, we can see that the repository test-repo-from-template is created with the template files.\n\n# create a repo from a template\nrepo = g.create_repo(\n    repo_name=\"test-repo-from-template\",\n    repo_template=\"COGS118A/group_template\",\n    private=True\n)\nprint(repo)\n\n# wait 3 sec for repository creation.\ntime.sleep(3)\n\nprint(\"\\nThis Repository contains... \\n\")\npprint(repo.get_contents(\".\"))\n\nRepository(full_name=\"COGS118A/test-repo-from-template\")\n\nThis Repository contains... \n\n[ContentFile(path=\".gitignore\"),\n ContentFile(path=\"Checkpoint_groupXXX.ipynb\"),\n ContentFile(path=\"FinalProject_groupXXX.ipynb\"),\n ContentFile(path=\"Proposal_groupXXX.ipynb\"),\n ContentFile(path=\"README.md\")]"
  },
  {
    "objectID": "gh_group_creation.html#rename-files-in-the-repository",
    "href": "gh_group_creation.html#rename-files-in-the-repository",
    "title": "GitHub Group Creation",
    "section": "Rename Files in the Repository",
    "text": "Rename Files in the Repository\nUsually, the template file names are generics and is not specific to a group. Under the context of group project, we want to rename each notebook files with thier group numbers. For example, for Group 1, we want to rename the file Checkpoint_groupXXX.ipynb to Checkpoint_group001.ipynb. To do that, we can use the following method.\n\nsource\n\nGitHubGroup.rename_files\n\n GitHubGroup.rename_files (repo:github.Repository.Repository,\n                           og_filename:str, new_filename:str)\n\nRename the file by delete the old file and commit the new file\n\n\n\n\nType\nDetails\n\n\n\n\nrepo\nRepository\nthe repository that we want to rename file\n\n\nog_filename\nstr\nold file name\n\n\nnew_filename\nstr\nnew file name\n\n\n\nNote: This method simply delete the old files and create new files with the updated file name. Therefore, 2 commits for each file is expected. (1 for delete, 1 for re-upload). For example, if I want to rename 5 files, I will have 10 commits need to do in total.\n\ng.rename_files(\n    repo=repo,\n    og_filename=\"Checkpoint_groupXXX.ipynb\",\n    new_filename=\"Checkpoint_group001.ipynb\"\n)\n# take a look at new files\nprint(\"\\nThis Repository contains... \\n\")\npprint(repo.get_contents(\".\"))\n\nFile Successfully Renamed from   Checkpoint_groupXXX.ipynb   to  Checkpoint_group001.ipynb \n\nThis Repository contains... \n\n[ContentFile(path=\".gitignore\"),\n ContentFile(path=\"Checkpoint_group001.ipynb\"),\n ContentFile(path=\"FinalProject_groupXXX.ipynb\"),\n ContentFile(path=\"Proposal_groupXXX.ipynb\"),\n ContentFile(path=\"README.md\")]\n\n\nNotice that the files were renamed as expected."
  },
  {
    "objectID": "gh_group_creation.html#add-collaborators-and-teams-to-repository",
    "href": "gh_group_creation.html#add-collaborators-and-teams-to-repository",
    "title": "GitHub Group Creation",
    "section": "Add Collaborators and Teams to Repository",
    "text": "Add Collaborators and Teams to Repository\nOnce the repository was created, we need to give the student team members proper permission to write to the repository and instructional team to be the admin of the repository. Those two functionalities are achieve by the following two methods.\n\nsource\n\nGitHubGroup.add_collaborator\n\n GitHubGroup.add_collaborator (repo:github.Repository.Repository,\n                               collaborator:str, permission:str)\n\nAdd collaborator to the repository with specified permission\n\n\n\n\nType\nDetails\n\n\n\n\nrepo\nRepository\ntarget repository\n\n\ncollaborator\nstr\nGitHub username of the collaborator\n\n\npermission\nstr\npull, push or admin\n\n\n\n\n# add collaborator to the repository with push permission\ng.add_collaborator(\n    repo=repo,\n    collaborator=\"Andrina-iris\",\n    permission=\"push\"\n)\n\nAdded Collaborator:  Andrina-iris  to:  test-repo-from-template  with permission:  push \n\n\n\nlist(repo.get_pending_invitations())\n\n[Invitation(id=225809591)]\n\n\n\ncollaborators = list(repo.get_collaborators())\npermission = [repo.get_collaborator_permission(i) for i in collaborators]\n# look at the permission.\npprint({collaborator.login: perm for collaborator, perm in zip(collaborators, permission)})\n\n{'jasongfleischer': 'admin', 'scott-yj-yang': 'admin'}\n\n\nAdditionally, course staffs should be in a team in the GitHub Organization in order to manage student repositories.\n\nsource\n\n\nGitHubGroup.get_team\n\n GitHubGroup.get_team (team_slug:str)\n\nGet the team inside the target organization\n\n\n\n\nType\nDetails\n\n\n\n\nteam_slug\nstr\nteam slug of the team\n\n\nReturns\nTeam\n\n\n\n\n\nteam = g.get_team(\"Instructors_Sp23\")\nteam\n\nTeam(name=\"Instructors_Sp23\", id=7676644)\n\n\n\nsource\n\n\nGitHubGroup.add_team\n\n GitHubGroup.add_team (repo:github.Repository.Repository,\n                       team:github.Team.Team, permission:str)\n\nAdd team to the repository with specified permission\n\n\n\n\nType\nDetails\n\n\n\n\nrepo\nRepository\ntarget repository\n\n\nteam\nTeam\nGitHub username of the collaborator\n\n\npermission\nstr\npull, push or admin\n\n\n\n\ng.add_team(\n    repo=repo,\n    team=team,\n    permission=\"admin\"\n)\n\nTeam  Instructors_Sp23  added to  test-repo-from-template  with permission  admin \n\n\n\ncollaborators = list(repo.get_collaborators())\npermission = [repo.get_collaborator_permission(i) for i in collaborators]\n# look at the permission.\npprint({collaborator.login: perm for collaborator, perm in zip(collaborators, permission)})\n\n{'Dongze-Li': 'admin',\n 'KevinZ0217': 'admin',\n 'eleeeysh': 'admin',\n 'jasongfleischer': 'admin',\n 'scott-yj-yang': 'admin',\n 'stephenjarrell19': 'admin',\n 'vikizzz': 'admin'}\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; THEIRS"
  },
  {
    "objectID": "groupeng_assign.html",
    "href": "groupeng_assign.html",
    "title": "GroupEngAssign",
    "section": "",
    "text": "source\n\nassign_groups\n\n assign_groups (groupeng_config:str)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngroupeng_config\nstr\nDirectory for the GroupEng config yml file\n\n\nReturns\n(&lt;class ‘bool’&gt;, &lt;class ‘str’&gt;)\nStatus and output directory of the compile file.\n\n\n\n\nprint(os.listdir(\"example\")) # take a look at the example files name\n\n['sample_group_specification.groupeng', '.DS_Store', 'sample_group_specification_annotated.groupeng', 'sample_class_1.csv', '.ipynb_checkpoints']\n\n\n\nstatus, outdir = assign_groups(\"example/sample_group_specification.groupeng\")\n\n\n# take a look at the output\nstatus, outdir\n\n(False, 'groups_example_2023-04-14_17-36-01')\n\n\nThe false means that at least one requirment is not satisfied. We can take a look at the file that was generated.\n\ndetails = pd.read_csv(os.path.join(outdir, \"example_details.csv\"), on_bad_lines='skip')\ndetails.head()\n\n\n\n\n\n\n\n\nID\nGPA\nGender\nEthnicity\nMajor\nSkill1\nSkill2\nSkill3\nProject choice\nGroup Number\nUnnamed: 10\ngroup GPA mean\nRules Broken\n\n\n\n\n0\n37\n2.636350\nM\n-\nCiv E\ny\ny\n-\nnanotech\n1.0\nNaN\nNaN\nNaN\n\n\n1\n41\n2.225582\nF\n-\nCiv E\ny\ny\ny\nrobotics\n1.0\nNaN\nNaN\nNaN\n\n\n2\n61\n4.220161\nM\n-\nMech E\n-\n-\ny\nstatistics\n1.0\nNaN\nNaN\nNaN\n\n\n3\n63\n2.976609\nF\n-\nEE\ny\n-\ny\nautomotive\n1.0\nNaN\nNaN\nNaN\n\n\n4\n75\n3.775685\nF\n-\nCS\ny\ny\ny\nstatistics\n1.0\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nThe following package will generate Canvas and GitHub groups based on this generated csv files."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CanvasGroupy",
    "section": "",
    "text": "View our documentation at this link\nThis module will use GroupEng to create canvas and github groups."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "CanvasGroupy",
    "section": "Install",
    "text": "Install\npip install CanvasGroupy"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "CanvasGroupy",
    "section": "How to use",
    "text": "How to use\nPlease visit GroupEng Official Website to see the documnetation of how to use GroupEng.\n\nassign_groups(\"example/sample_group_specification.groupeng\")\n\n['-', '-', 'B', '-', '-']\n['B', '-', 'H', '-', '-']\n['H', '-', '-', '-', '-']\n['-', 'H', '-', 'B', 'H']\n['-', '-', '-', 'B', '-']\n['-', '-', 'H', '-', '-']\n['nanotech', 'renewable energy', 'nanotech', 'nanotech', 'nanotech']\n['automotive', 'automotive', 'robotics', 'automotive', 'renewable energy']\n['automotive', 'statistics', 'automotive', 'renewable energy', 'renewable energy']\n['automotive', 'automotive', 'statistics', 'renewable energy', 'renewable energy']\n['automotive', 'automotive', 'renewable energy', 'statistics', 'renewable energy']\n['renewable energy', 'automotive', 'automotive', 'statistics', 'renewable energy']\n['CS', 'EE', 'Mech E', 'CS', 'EE']\n['CS', 'EE', 'Mech E', 'Mech E', 'EE']\n['CS', 'Civ E', 'EE', 'Mech E', 'Mech E']\n['EE', 'Civ E', 'Civ E', 'EE', 'Mech E']\n['EE', 'Mech E', 'CS', 'EE', 'EE']\n['Civ E', 'Mech E', 'CS', 'Mech E', 'EE']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['-', '-', 'y', '-', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', 'y', 'y', 'y', 'y']\n['y', '-', '-', 'y', 'y']\n['y', 'y', 'y', '-', '-']\n['y', 'y', '-', 'y', '-']\n['-', '-', '-', 'y', 'y']\n['y', '-', 'y', '-', 'y']\n['-', '-', 'y', '-', 'y']\n[3.2579174234, 3.5995299693, 3.2756432963, 4.220160605, 2.5723254477]\n[3.2579174234, 3.2756432963, 2.5723254477, 3.5995299693, 4.220160605]\n[4.220160605, 3.5995299693, 3.2756432963, 3.2579174234, 2.5723254477]\n[3.2756432963, 4.220160605, 3.2579174234, 2.5723254477, 3.5995299693]\n[3.5995299693, 4.220160605, 3.2756432963, 3.2579174234, 2.5723254477]\n[3.5995299693, 3.2756432963, 2.5723254477, 3.2579174234, 4.220160605]\n\n\n(False, 'groups_example_2023-04-18_13-00-35')"
  }
]